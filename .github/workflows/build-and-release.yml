name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'DatabaseMcp.Server'
  OUTPUT_NAME: 'DatabaseMcp.Server'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            runtime: win-x64
            extension: .exe
          - os: macos-latest
            runtime: osx-x64
            extension: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal

    - name: Publish single-file executable
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./publish/${{ matrix.runtime }} \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:PublishTrimmed=false \
          /p:EnableCompressionInSingleFile=true

    - name: Copy configuration files
      shell: bash
      run: |
        # Ensure publish directory exists
        mkdir -p ./publish/${{ matrix.runtime }}
        
        # Copy example configuration files to publish directory
        if [ -f "appsettings.example.json" ]; then
          cp appsettings.example.json ./publish/${{ matrix.runtime }}/appsettings.json
        fi
        
        if [ -f "DatabaseMcp.Server/appsettings.example.json" ]; then
          cp DatabaseMcp.Server/appsettings.example.json ./publish/${{ matrix.runtime }}/appsettings.server.json
        fi
        
        if [ -f "DatabaseMcp.Client/appsettings.example.json" ]; then
          cp DatabaseMcp.Client/appsettings.example.json ./publish/${{ matrix.runtime }}/appsettings.client.json
        fi
        
        if [ -f ".vscode/mcp.example.json" ]; then
          cp .vscode/mcp.example.json ./publish/${{ matrix.runtime }}/mcp.example.json
        fi
        
        # Copy documentation files that exist
        for doc in README.md LICENSE QUICK_REFERENCE.md MCP_TOOLS_GUIDE.md ORACLE_COMPATIBILITY.md SECURITY.md DEPLOYMENT.md; do
          if [ -f "$doc" ]; then
            cp "$doc" ./publish/${{ matrix.runtime }}/
          fi
        done

    - name: Create setup script (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cat > ./publish/${{ matrix.runtime }}/setup.bat << 'EOF'
        @echo off
        echo 🚀 Oracle Database MCP Agent Setup
        echo ==================================
        echo.
        echo Setting up configuration files...
        
        if not exist "appsettings.json" (
            echo Creating appsettings.json from template...
            copy "appsettings.json" "appsettings.configured.json" >nul
            echo ✅ Created appsettings.configured.json
            echo ⚠️  Please edit appsettings.configured.json with your database connection details
        ) else (
            echo ✅ appsettings.json already exists
        )
        
        echo.
        echo 📚 Documentation files included:
        echo   - README.md - Complete setup guide
        echo   - QUICK_REFERENCE.md - Quick command reference  
        echo   - MCP_TOOLS_GUIDE.md - Complete tools documentation
        echo   - ORACLE_COMPATIBILITY.md - Database compatibility guide
        echo.
        echo 🚀 To run the MCP server:
        echo   DatabaseMcp.Server.exe --console
        echo.
        echo For more information, see README.md
        pause
        EOF

    - name: Create setup script (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        cat > ./publish/${{ matrix.runtime }}/setup.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Oracle Database MCP Agent Setup"
        echo "=================================="
        echo
        echo "Setting up configuration files..."
        
        if [ ! -f "appsettings.configured.json" ]; then
            echo "Creating appsettings.configured.json from template..."
            cp "appsettings.json" "appsettings.configured.json"
            echo "✅ Created appsettings.configured.json"
            echo "⚠️  Please edit appsettings.configured.json with your database connection details"
        else
            echo "✅ appsettings.configured.json already exists"
        fi
        
        echo
        echo "📚 Documentation files included:"
        echo "  - README.md - Complete setup guide"
        echo "  - QUICK_REFERENCE.md - Quick command reference"
        echo "  - MCP_TOOLS_GUIDE.md - Complete tools documentation"
        echo "  - ORACLE_COMPATIBILITY.md - Database compatibility guide"
        echo
        echo "🚀 To run the MCP server:"
        echo "  ./DatabaseMcp.Server --console"
        echo
        echo "For more information, see README.md"
        EOF
        chmod +x ./publish/${{ matrix.runtime }}/setup.sh
        chmod +x ./publish/${{ matrix.runtime }}/DatabaseMcp.Server

    - name: Create release package
      shell: bash
      run: |
        cd ./publish/${{ matrix.runtime }}
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a -tzip "../../database-mcp-agent-${{ matrix.runtime }}.zip" .
        else
          tar -czf "../../database-mcp-agent-${{ matrix.runtime }}.tar.gz" .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: database-mcp-agent-${{ matrix.runtime }}
        path: |
          database-mcp-agent-${{ matrix.runtime }}.*
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir release-assets
        find artifacts -name "*.zip" -o -name "*.tar.gz" | xargs -I {} cp {} release-assets/
        ls -la release-assets/

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        # 🚀 Oracle Database MCP Agent Release
        
        ## What's New
        - Complete Oracle Database MCP Agent with 25+ analysis tools
        - Single-file executable for easy deployment
        - Cross-platform support (Windows, macOS)
        - Comprehensive Oracle compatibility (11g R2 through 19c+)
        
        ## 📦 Download Options
        
        ### Windows
        - `database-mcp-agent-win-x64.zip` - Windows 64-bit executable
        
        ### macOS
        - `database-mcp-agent-osx-x64.tar.gz` - macOS 64-bit executable
        
        ## 🚀 Quick Start
        
        1. Download the appropriate package for your platform
        2. Extract the archive
        3. Run the setup script (`setup.bat` on Windows, `setup.sh` on Unix)
        4. Edit `appsettings.configured.json` with your Oracle database connection
        5. Run: `DatabaseMcp.Server --console`
        
        ## 📚 Documentation Included
        
        Each package includes:
        - **README.md** - Complete setup and usage guide
        - **QUICK_REFERENCE.md** - Quick command reference
        - **MCP_TOOLS_GUIDE.md** - Comprehensive tools documentation with 100+ sample prompts
        - **ORACLE_COMPATIBILITY.md** - Database version compatibility guide
        - **SECURITY.md** - Security best practices
        
        ## 🔧 Requirements
        
        - Oracle Database 11g R2 or later
        - Network access to your Oracle database
        - Appropriate database permissions (CONNECT, RESOURCE, SELECT on system views)
        
        ## 🌟 Features
        
        - **25+ MCP Tools** for comprehensive database analysis
        - **Metadata Discovery** - Tables, views, procedures, functions, triggers
        - **Dependency Analysis** - Impact analysis before schema changes  
        - **Constraint Analysis** - Primary keys, foreign keys, unique constraints
        - **Performance Tools** - Index analysis and optimization
        - **Raw SQL Execution** - Direct query capabilities
        - **Metadata Caching** - Improved performance with smart caching
        
        For complete documentation visit: https://github.com/ram62836/database-mcp-agent
        EOF
        
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
